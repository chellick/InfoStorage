import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import os
from datetime import datetime
import numpy as np

from db import MilvusDB
from classifier import MessageClassifier

load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")

if not API_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API_TOKEN —É–∫–∞–∑–∞–Ω –≤ —Ñ–∞–π–ª–µ .env")

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

try:
    db = MilvusDB()
    classifier = MessageClassifier()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
    db = None
    classifier = None

class BotStates(StatesGroup):
    waiting_for_message = State()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π!

–Ø —É–º–µ—é:
‚Ä¢ üìù –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–µ–º–∞–º
‚Ä¢ üè∑Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞—Ç—å —Ç–µ–≥–∏
‚Ä¢ üíæ –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ üîç –ò—Å–∫–∞—Ç—å –ø–æ—Ö–æ–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—é!

–ö–æ–º–∞–Ω–¥—ã:
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
/search - –ø–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
/help - –ø–æ–º–æ—â—å
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="search")],
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ])
    
    await message.answer(welcome_text, reply_markup=keyboard)

@dp.message(Command("stats"))
async def cmd_stats(message: Message):
    if not db:
        await message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    try:
        stats = db.get_stats()
        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:**

üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}
üë§ –í–∞—à ID: {message.from_user.id}
üïê –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {datetime.now().strftime('%H:%M:%S')}
"""
        await message.answer(stats_text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@dp.message(Command("search"))
async def cmd_search(message: Message, state: FSMContext):
    if not db or not classifier:
        await message.answer("‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    await message.answer("üîç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–ø–∏—Å–µ–π:")
    await state.set_state(BotStates.waiting_for_message)

@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = """
üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:**

**–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:**
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –±–æ—Ç:
1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç –µ–≥–æ —Ç–µ–º—É (—Ä–∞–±–æ—Ç–∞, —É—á–µ–±–∞, —Å–µ–º—å—è, –∑–¥–æ—Ä–æ–≤—å–µ, –¥–æ—Å—É–≥, —Ñ–∏–Ω–∞–Ω—Å—ã, –≤–∞–∂–Ω–æ–µ)
2. –°–æ–∑–¥–∞—Å—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
3. –°–æ—Ö—Ä–∞–Ω–∏—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã:**
‚Ä¢ üíº –†–∞–±–æ—Ç–∞ - –ø—Ä–æ–µ–∫—Ç—ã, –≤—Å—Ç—Ä–µ—á–∏, –∑–∞–¥–∞—á–∏
‚Ä¢ üìö –£—á–µ–±–∞ - –ª–µ–∫—Ü–∏–∏, —ç–∫–∑–∞–º–µ–Ω—ã, –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è - –≤—Å—Ç—Ä–µ—á–∏ —Å —Ä–æ–¥–Ω—ã–º–∏, —Å–µ–º–µ–π–Ω—ã–µ –¥–µ–ª–∞
‚Ä¢ üè• –ó–¥–æ—Ä–æ–≤—å–µ - –≤—Ä–∞—á–∏, —Å–ø–æ—Ä—Ç, —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ
‚Ä¢ üéÆ –î–æ—Å—É–≥ - —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, —Ö–æ–±–±–∏, –æ—Ç–¥—ã—Ö
‚Ä¢ üí∞ –§–∏–Ω–∞–Ω—Å—ã - –ø–æ–∫—É–ø–∫–∏, —Å—á–µ—Ç–∞, –±—é–¥–∂–µ—Ç
‚Ä¢ ‚ö†Ô∏è –í–∞–∂–Ω–æ–µ - —Å—Ä–æ—á–Ω—ã–µ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–µ–ª–∞

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/search - –ø–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ü–æ–∏—Å–∫:**
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /search, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
"""
    await message.answer(help_text, parse_mode="Markdown")

@dp.callback_query()
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "stats":
        await cmd_stats(callback_query.message)
    elif callback_query.data == "search":
        await cmd_search(callback_query.message, state)
    elif callback_query.data == "help":
        await cmd_help(callback_query.message)
    
    await callback_query.answer()

@dp.message(BotStates.waiting_for_message)
async def process_search_query(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    
    if not db or not classifier:
        await message.answer("‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        await state.clear()
        return
    
    try:
        query_vector = classifier.get_text_embedding(message.text)
        similar_messages = db.search_similar(query_vector, limit=5)
        
        if not similar_messages:
            await message.answer("üîç –ü–æ—Ö–æ–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            response = "üîç **–ü–æ—Ö–æ–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**\n\n"
            for i, msg in enumerate(similar_messages, 1):
                similarity = (1 - msg['distance']) * 100
                response += f"**{i}.** `{msg['text'][:100]}...`\n"
                response += f"   üè∑Ô∏è –¢–µ–≥: {msg['tags']}\n"
                response += f"   üìä –°—Ö–æ–∂–µ—Å—Ç—å: {similarity:.1f}%\n"
                response += f"   üìÖ –î–∞—Ç–∞: {datetime.fromtimestamp(msg['created_time']).strftime('%d.%m.%Y %H:%M')}\n\n"
            
            await message.answer(response, parse_mode="Markdown")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")
    
    await state.clear()

@dp.message()
async def handle_message(message: Message):
    if not message.text:
        await message.answer("‚ùå –Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
        return
    
    if not db or not classifier:
        await message.answer("‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    processing_msg = await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    
    try:
        tag = classifier.classify_message(message.text)
        vector = classifier.get_text_embedding(message.text)
        success = db.insert_message(
            text=message.text,
            vector=vector,
            tags=tag,
            user_id=message.from_user.id
        )
        
        if success:
            similar_tags = classifier.get_similar_tags(message.text, top_k=3)
            
            response = f"""
‚úÖ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!**

üìù **–¢–µ–∫—Å—Ç:** `{message.text[:100]}...` 

üè∑Ô∏è **–ü—Ä–∏—Å–≤–æ–µ–Ω–Ω—ã–π —Ç–µ–≥:** `{tag}`

üìä **–î—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–µ–≥–∏:**
"""
            for i, (tag_name, probability) in enumerate(similar_tags, 1):
                response += f"{i}. {tag_name} ({probability:.1%})\n"
            
            response += f"\nüíæ **–°—Ç–∞—Ç—É—Å:** –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ", callback_data="search")],
                [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
            ])
            
            await processing_msg.edit_text(response, parse_mode="Markdown", reply_markup=keyboard)
        else:
            await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await processing_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

async def main():
    logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    
    if not db or not classifier:
        logger.warning("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é.")
    
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(main())
